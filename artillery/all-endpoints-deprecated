#!/usr/bin/env ruby

require 'json'
require 'tempfile'
require 'table_print'

required_environment_variables = %w(
  BRANCH_NAME
  COMMIT_SHA
  FILE_PATH
  FULL_LOAD_ARRIVAL_RATE
  FULL_LOAD_DURATION
  GROUP_ID
  HOST_URL
  MR_IID
  PROJECT_ID
  RAMPUP_ARRIVAL_RATE
  RAMPUP_DURATION
  WARMUP_ARRIVAL_RATE
  WARMUP_DURATION
)

missing_environment_variables = required_environment_variables - ENV.keys
if missing_environment_variables.any?
  puts "Missing the #{missing_environment_variables.join(", ")} environment variable(s)."
  exit 1
end

endpoints = %w(
  /api/v4/projects/%{PROJECT_ID}/repository/commits/%{COMMIT_SHA}
  /api/v4/projects/%{PROJECT_ID}
  /api/v4/projects/%{PROJECT_ID}/deploy_keys
  /api/v4/projects/%{PROJECT_ID}/repository/commits/%{COMMIT_SHA}/diff
  /api/v4/projects/%{PROJECT_ID}/repository/branches/%{BRANCH_NAME}
  /api/v4/projects/%{PROJECT_ID}/repository/commits
  /api/v4/groups/%{GROUP_ID}/projects
  /api/v4/projects/%{PROJECT_ID}/repository/files/%{FILE_PATH}?ref=master
  /api/v4/projects/%{PROJECT_ID}/repository/files/%{FILE_PATH}/raw?ref=master
  /api/v4/projects
  /api/v4/projects/%{PROJECT_ID}/merge_requests/%{MR_IID}/notes
  /api/v4/projects/%{PROJECT_ID}/repository/tree
  /api/v4/projects/%{PROJECT_ID}/repository/branches
  /%{TEST_GROUP}/gitlabhq.git/info/refs?service=git-upload-pack
  /api/v4/projects/%{PROJECT_ID}/merge_requests/%{MR_IID}
  /%{TEST_GROUP}/gitlabhq/refs/master/logs_tree
  /%{TEST_GROUP}/gitlabhq/blob/master/app/models/project.rb
  /api/v4/projects/%{PROJECT_ID}/repository/commits/%{SIGNED_COMMIT_SHA}/signature
  /api/v4/projects/%{PROJECT_ID}/pipelines
  /%{TEST_GROUP}/gitlabhq/merge_requests/%{MR_IID_MANY_COMMITS}
  /%{TEST_GROUP}/gitlabhq/merge_requests/%{MR_IID_MANY_COMMITS}/diffs.json
)

def run_endpoint(endpoint)
  puts ">> Running tests against API_ENDPOINT: #{endpoint} \n"

  tmpfile = Tempfile.new("artillery-out-json")

  environment = {
    'API_ENDPOINT' => endpoint
  }

  cmd = [
    'node_modules/.bin/artillery',
    'run',
    'artillery/scenarios/deprecated/artillery-single-endpoint.yml',
    '-o',
    tmpfile.path
  ]

  unless system(environment, *cmd)
    puts "Command failed."
    return
  end

  data_hash = JSON.parse(tmpfile.read)

  {
    API: endpoint,
    P95: data_hash["aggregate"]["latency"]["p95"],
    RPS_Count: data_hash["aggregate"]["rps"]["count"],
    RPS_Mean: data_hash["aggregate"]["rps"]["mean"]
  }
ensure
  tmpfile&.close
  tmpfile&.unlink

  puts "\n===========================================\n\n"
end

results = endpoints.map do |endpoint|
  expanded = endpoint % ENV.to_h.transform_keys(&:to_sym)
  run_endpoint(expanded)
end.compact

tp.set(:max_width, 100)
tp(results)
