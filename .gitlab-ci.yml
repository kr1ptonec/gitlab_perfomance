include:
  - local: '.gitlab/ci/includes/gitaly-n-plus-one-tests.yml'

stages:
  - check
  - test
  - test-quarantine
  - notification

.ruby-base: &ruby-base
  image: "ruby:2.6.3"
  before_script:
    - gem install bundler -v 2.0.2
    - export BUNDLER_VERSION=2.0.2
    - export BUNDLE_PATH__SYSTEM=false
    - bundle install --path vendor/bundle/

#########################
##     MR Checks     ##
#########################

check:rubocop:
  stage: check
  <<: *ruby-base
  script:
    - bundle exec rubocop --parallel
  except:
    - schedules

check:yamllint:
  stage: check
  # Use an up to date image of yamllint that can handle unicode emojis
  image: pipelinecomponents/yamllint
  script:
    - yamllint .gitlab-ci.yml artillery
  except:
    - schedules

check:artillery:
  stage: check
  <<: *ruby-base
  script:
    - curl -sL https://deb.nodesource.com/setup_12.x | bash -
    - apt-get install -y nodejs
    - npm install
    - bundle exec artillery/run-scenarios artillery/environments/staging.gitlab.com.yml -- artillery/scenarios/checks/commit_check.yml
  except:
    - schedules

check:sitespeed:
  stage: check
  image: docker:git
  services:
    - docker:stable-dind
  script:
    - docker pull sitespeedio/sitespeed.io
    - docker run --shm-size=1g --rm sitespeedio/sitespeed.io https://staging.gitlab.com -n 1
  except:
    - schedules

##########################
## Artillery Load Tests ##
##########################

.base-artillery-environment: &base-artillery-environment
  stage: test
  <<: *ruby-base
  script:
    - curl -sL https://deb.nodesource.com/setup_12.x | bash -
    - apt-get install -y nodejs
    - npm install
    - bundle exec artillery/run-environment $TARGET_ENVIRONMENT
  only:
    refs:
      - schedules
  artifacts:
    paths:
      - out/

artillery-environment-all-scenarios:
  stage: test
  <<: *base-artillery-environment
  only:
    variables:
      - $TEST_TYPE == "Artillery"

artillery-environment-all-scenarios-10x:
  stage: test
  <<: *base-artillery-environment
  parallel: 10
  only:
    variables:
      - $TEST_TYPE == "Artillery 10x"

################################
## SiteSpeed Performance Tests ##
################################

sitespeed-performance:
  stage: test
  image: docker:git
  services:
    - docker:stable-dind
  tags:
    - docker
  script:
    - mkdir sitespeed-results
    - docker pull sitespeedio/sitespeed.io
    - docker run --shm-size=1g --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io --browsertime.iterations 1 --browsertime.pageCompleteCheck 'return (function() {try { return (Date.now() - window.performance.timing.loadEventEnd) > 20000;} catch(e) {} return true;})()' --browsertime.viewPort "1366x1080" --outputFolder sitespeed-results --summary-detail --slack.hookUrl $CI_SLACK_WEBHOOK_URL --slack.limitMetric "speedIndex" --slack.limitWarning 1800 --slack.limitError 2000 $URL_FILE
  only:
    refs:
      - schedules
    variables:
      - $TEST_TYPE == "SiteSpeed"
  artifacts:
    paths:
      - sitespeed-results/

######################
## Notification jobs ##
######################
.notify: &notify
  image: alpine
  stage: notification
  cache: {}
  before_script:
    - apk update && apk add git curl bash
  only:
    - schedules

notify-slack-success-artillery:
  <<: *notify
  script:
    - artillery_summary_file=$(find out -name *_aggregated_results.txt -print -quit)
    - artillery_summary=$([ -r $artillery_summary_file ] && echo "\`\`\`$(cat $artillery_summary_file)\`\`\`")
    - bin/slack qa-performance "🎉 Test $TEST_TYPE against $TARGET_ENVIRONMENT has finished! 🎉 $artillery_summary See $CI_PIPELINE_URL for more info." ci_passing
  when: on_success
  only:
    variables:
      - $TEST_TYPE =~ /^Artillery.*/

notify-slack-success-sitespeed:
  <<: *notify
  script:
    - bin/slack qa-performance "🎉 $TEST_TYPE against $TARGET_ENVIRONMENT has finished! 🎉 See last message in this channel from SiteSpeed.io bot or $CI_PIPELINE_URL for more info." ci_passing
  when: on_success
  only:
    variables:
      - $TEST_TYPE =~ /^SiteSpeed.*/

notify-slack-fail:
  <<: *notify
  script:
    - bin/slack qa-performance "☠️ $TEST_TYPE against $TARGET_ENVIRONMENT has failed to finish! ☠️ See $CI_PIPELINE_URL." ci_failing
  when: on_failure
