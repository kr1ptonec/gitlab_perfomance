#!/usr/bin/env ruby

require 'json'
require 'tempfile'
require 'table_print'

endpoints = %w(
  /api/v4/projects/$PROJECT_ID/repository/commits/$COMMIT_SHA
  /api/v4/projects/$PROJECT_ID
  /api/v4/projects/$PROJECT_ID/deploy_keys
  /api/v4/projects/$PROJECT_ID/repository/commits/$COMMIT_SHA/diff
  /api/v4/projects/$PROJECT_ID/repository/branches/$BRANCH_NAME
  /api/v4/projects/$PROJECT_ID/repository/commits
  /api/v4/groups/$GROUP_ID/projects
  /api/v4/projects/$PROJECT_ID/repository/files/$FILE_PATH?ref=master
  /api/v4/projects/$PROJECT_ID/repository/files/$FILE_PATH/raw?ref=master
  /api/v4/projects
  /api/v4/projects/$PROJECT_ID/merge_requests/$MR_IID/notes
  /api/v4/projects/$PROJECT_ID/repository/tree
  /api/v4/projects/$PROJECT_ID/repository/branches
)

results = []

endpoints.each do |endpoint|
  puts "Running tests against API_ENDPOINT: #{endpoint}\n"

  tmpfile = Tempfile.new("artillery-out-json")
  cmd = <<~EOF
    export API_ENDPOINT=#{endpoint}
    node_modules/.bin/artillery run load/artillery/artillery-single-endpoint.yml -o #{tmpfile.path}
  EOF

  unless system(cmd)
    puts "Command failed."
    next
  end

  data_hash = JSON.parse(tmpfile.read)

  result = {
    API: endpoint,
    P95: data_hash["aggregate"]["latency"]["p95"],
    RPS_Count: data_hash["aggregate"]["rps"]["count"],
    RPS_Mean: data_hash["aggregate"]["rps"]["mean"]
  }
  results << result

  puts "\n===========================================\n\n"
ensure
  tmpfile&.close
  tmpfile&.unlink
end

tp.set(:max_width, 100)
tp(results)
