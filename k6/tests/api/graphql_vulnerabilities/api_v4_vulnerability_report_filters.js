/*global __ENV : true  */
/*
@endpoint: `GET /groups/:id/projects`
@example_uri: /api/v4/groups/:environment_root_group/projects
@description: Gets vulnerabilities from vulnerability report based on different filters
@issue: https://gitlab.com/gitlab-org/quality/performance/-/issues/413
*/

import http from "k6/http";
import { group } from "k6";
import { Rate } from "k6/metrics";

import {
  getRpsThresholds,
  getTtfbThreshold,
  selectRandom,
  logGraphqlError
} from "../../../lib/gpt_k6_modules.js";

import {
  getVulnerabilitiesProjects
} from "../../../lib/gpt_data_helper_functions.js";

export let thresholds = {
  'rps': { 'latest': 0.5 },
  'ttfb': { 'latest': 800 },
};

export let rpsThresholds = getRpsThresholds(thresholds['rps'])
export let ttfbThreshold = getTtfbThreshold(thresholds['ttfb'])
export let successRate = new Rate("successful_requests")

export let options = {
  thresholds: {
    "http_req_waiting": [`p(90)<${ttfbThreshold}`],
    "http_reqs": [`count>=${rpsThresholds['count']}`]
  }
};

export function setup() {
  console.log('')
  console.log(`RPS Threshold: ${rpsThresholds['mean']}/s (${rpsThresholds['count']})`)
  console.log(`TTFB P90 Threshold: ${ttfbThreshold}ms`)
  return selectRandom(getVulnerabilitiesProjects()) //setup function can return data to default function
}



export default function(project) {
  group("API - Group Projects List", function() {
    let headers = {
      "PRIVATE-TOKEN": `${__ENV.ACCESS_TOKEN}`,
      "Content-Type": "application/json"
    };
    let severity = selectRandom(["MEDIUM", "INFO", "UNKNOWN", "HIGH", "LOW", "CRITICAL"])
    let query = `
      query
        {
          project(fullPath: "${project}")
          {
            vulnerabilities(severity: ${severity}){
              nodes{
                id
                resolvedOnDefaultBranch
                state
              }
            }
          }
        }`;


    let res = http.post(`${__ENV.ENVIRONMENT_URL}/api/graphql`, JSON.stringify({ query: query }),
       {headers: headers});
    const graphQLErrors = JSON.parse(res.body).errors;
    graphQLErrors ? (successRate.add(false), logGraphqlError(graphQLErrors)) : successRate.add(true);
  });
}
