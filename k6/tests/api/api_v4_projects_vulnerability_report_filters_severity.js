/*global __ENV : true  */
/*
@endpoint: `POST /api/graphql`
@description: List project vulnerabilities based on different filters
@gpt_data_version: 1
@flags: vulnerabilities
*/

import http from "k6/http";
import { group } from "k6";
import { Rate } from "k6/metrics";

import { getRpsThresholds, getTtfbThreshold, selectRandom, getVulnerabilitiesProjects, logGraphqlError } from "../../lib/gpt_k6_modules.js";

export let thresholds = {
  'ttfb': { 'latest': 250 },
};

export let rpsThresholds = getRpsThresholds(thresholds['rps'])
export let ttfbThreshold = getTtfbThreshold(thresholds['ttfb'])
export let successRate = new Rate("successful_requests")
export const projects = getVulnerabilitiesProjects()
export let projectToUse = projects["unencoded_paths"][0]

export let options = {
  thresholds: {
    "successful_requests": [`rate>${__ENV.SUCCESS_RATE_THRESHOLD}`],
    "http_req_waiting": [`p(90)<${ttfbThreshold}`],
    "http_reqs": [`count>=${rpsThresholds['count']}`]
  }
};

export function setup() {
  console.log('')
  console.log(`RPS Threshold: ${rpsThresholds['mean']}/s (${rpsThresholds['count']})`)
  console.log(`TTFB P90 Threshold: ${ttfbThreshold}ms`)
  console.log(`Success Rate Threshold: ${parseFloat(__ENV.SUCCESS_RATE_THRESHOLD)*100}%`)
}



export default function() {
  group("API - Projects Vulnerabilities List", function() {
    let headers = {
      "PRIVATE-TOKEN": `${__ENV.ACCESS_TOKEN}`,
      "Content-Type": "application/json"
    };
    let severity = selectRandom(["MEDIUM", "INFO", "UNKNOWN", "HIGH", "LOW", "CRITICAL"])
    let query = `
      query
        {
          project(fullPath: "${projectToUse}")
          {
            vulnerabilities(severity: ${severity}){
              nodes{
                id
                resolvedOnDefaultBranch
                state
              }
            }
          }
        }`;

    let res = http.post(`${__ENV.ENVIRONMENT_URL}/api/graphql`, JSON.stringify({ query: query }), {headers: headers});
    const graphQLErrors = JSON.parse(res.body).errors;
    graphQLErrors ? (successRate.add(false), logGraphqlError(graphQLErrors)) : successRate.add(true);
  });
}
