#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path('../lib', __dir__)

require 'chronic_duration'
require 'collect_test_info'
require 'fileutils'
require 'optimist'
require 'rainbow'
require 'run_k6'
require 'table_print'
require 'time'
require 'tmpdir'

k6_dir = File.expand_path('../k6', __dir__)

opts = Optimist.options do
  banner "Usage: run-k6 [options]"
  banner "\nRuns k6 Test(s) with the given Options against the specified Environment."
  banner "\nOptions:"
  opt :help, 'Show this help message'
  opt :environment, "Environment Config file path that contains the relevant Environment Variables to be passed to the tests.", type: :string, required: true
  opt :options, "Path of Options Config file path that the tests should be run with.", type: :string, default: "#{k6_dir}/options/20s_2rps.json"
  opt :tests, "Path of Test file or folder paths to run.", type: :strings, default: ["#{k6_dir}/tests"]
  opt :custom, "Include any tests inside the k6/tests/custom folder when true.", type: :flag, default: false
  opt :scenarios, "Include any scenario tests inside the #{k6_dir}/tests/scenarios folder when true.", type: :flag, default: false
  opt :quarantined, "Include any tests inside the #{k6_dir}/tests/quarantined folder when true.", type: :flag, default: false
  opt :http_debug, "Enable `k6` HTTP debug logs in output", type: :flag, default: false
  banner "\nEnvironment Variable(s):"
  banner "  ACCESS_TOKEN             A valid GitLab Personal Access Token for the specified environment that's required by various tests. The token should come from a User that has admin access for the project(s) to be tested and have API and read_repository permissions. (Default: nil)"
  banner "\nExamples:"
  banner "  Running all Tests with the 60s_200rps Options file against the 10k Environment:"
  banner "    #{$PROGRAM_NAME} --environment #{k6_dir}/environments/10k.json --options #{k6_dir}/options/60s_200rps.json"
  banner "  Run a specific Test with the 60s_200rps Options file against the 10k Environment:"
  banner "    #{$PROGRAM_NAME} --environment #{k6_dir}/environments/10k.json --options #{k6_dir}/options/60s_200rps.json --tests #{k6_dir}/tests/api/api_v4_groups_projects.js"
end

puts Rainbow("GitLab Performance Tool - k6 load test runner").color(230, 83, 40)
warn Rainbow("\nEnvironment Variable ACCESS_TOKEN has not been set. Various tests require this for authentication and they will be skipped for this run. See command help for more info...").yellow unless ENV['ACCESS_TOKEN']

k6_path = RunK6.setup_k6

# Variables
env_vars = RunK6.setup_env_vars(env_file: opts[:environment], options_file: opts[:options])
env_version = RunK6.get_env_version(env_vars: env_vars)
start_time = Time.now

results_dir = File.join("#{k6_dir}/results", "#{env_vars['ENVIRONMENT_NAME']}_#{start_time.strftime('%Y%m%d_%H%M%S')}")
puts "\nSaving all test results to #{results_dir}"
FileUtils.mkdir_p(results_dir)

aggregated_results = []
aggregated_success = true

# Collect and run tests
tests = RunK6.get_tests(test_paths: opts[:tests], quarantined: opts[:quarantined], scenarios: opts[:scenarios], custom: opts[:custom])
tests.each do |test_file|
  test_name = File.basename(test_file, '.js')

  success, output = RunK6.run_k6(k6_path: k6_path, env_vars: env_vars, options_file: opts[:options], test_file: test_file, http_debug: opts[:http_debug])

  parsed_results = RunK6.parse_k6_results(output: output)
  success = false if parsed_results.nil?
  aggregated_results << { Name: test_name }.merge(parsed_results).merge({ Result: success ? "Passed" : "Failed" })
  aggregated_success &&= success
rescue Interrupt
  warn Rainbow("Caught the interrupt. Stopping.").yellow
  exit
rescue ArgumentError => e
  warn Rainbow(e.message).yellow
  next
rescue StandardError => e
  warn Rainbow("Test failed: #{e.message}").red
  aggregated_success = false
end

# Save test times
end_time = Time.now
run_time = (end_time - start_time).round(2)
test_epoch_times_json = File.join(results_dir, "#{env_vars['ENVIRONMENT_NAME']}_test_epoch_times.json")
test_epoch_times = { start_time: (start_time.to_f * 1000).to_i, end_time: (end_time.to_f * 1000).to_i, run_time: run_time }
File.write(test_epoch_times_json, test_epoch_times.to_json)

puts Rainbow("\nAll k6 tests have finished after #{run_time}s!").green

# Parse results
if aggregated_results.empty?
  puts "No tests reported any results. Exiting..."
  exit
end

aggregated_results_json = File.join(results_dir, "#{env_vars['ENVIRONMENT_NAME']}_#{start_time.strftime('%Y-%m-%d_%H:%M:%S')}_results.json")
aggregated_results_txt = File.join(results_dir, "#{env_vars['ENVIRONMENT_NAME']}_#{start_time.strftime('%Y-%m-%d_%H:%M:%S')}_results.txt")

aggregated_issues = TestInfo.get_known_issues(k6_dir)
puts "\nKnown issues:\n\nNote that the following endpoints below have known issues. These tests have either been run with a custom lower threshold limit applied or are quarantined until the issue is fixed:\n"
tp.set(:max_width, 100)
tp(aggregated_issues)

test_details_summary = <<~DOC
  Environment:    #{env_vars['ENVIRONMENT_NAME']} #{env_version ? "(#{env_version})" : ''}
  Option:         #{File.basename(opts[:options], '.json')}
  Date:           #{start_time.strftime('%F')}
  Run Time:       #{run_time}s (Start: #{start_time.utc.strftime('%T %Z')}, End: #{end_time.utc.strftime('%T %Z')})
DOC
puts "\n\nResults summary:\n\n#{test_details_summary}\n"
tp(aggregated_results)

puts "\nSaving results summary to:\n#{aggregated_results_json}\n#{aggregated_results_txt}"
File.write(aggregated_results_json, aggregated_results.to_json)
File.open(aggregated_results_txt, 'w') do |file|
  file.write(test_details_summary)
  tp.set :io, file
  tp(aggregated_results)
  tp.clear :io
end

unless aggregated_success
  puts Rainbow("\nOne or more k6 tests have failed...").red
  exit(1)
end
