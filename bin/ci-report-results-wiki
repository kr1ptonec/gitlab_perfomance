#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path('../lib', __dir__)

require 'fileutils'
require 'gpt_common'
require 'json'
require 'naturally'
require 'optimist'
require 'run_k6'
require 'table_print'
require 'time'

# Get parent folder(`k6`) path from the current file
k6_dir = File.expand_path('../k6', __dir__)

@opts = Optimist.options do
  banner "Usage: ci-report-results-wiki [options]"
  banner "\nReports GitLab Performance Tool test results to a Wiki. Designed for use in GitLab CI."
  banner "\nOptions:"
  opt :help, 'Show help message'
  opt :results_path, "Path of k6 test results files to report on. Can be a directory that will be searched recursively or a direct filepath.", type: :string, default: "#{k6_dir}/results"
  opt :page_title, "Title to use for wiki page", type: :string, required: true
  opt :api_url, "GitLab wiki API URL", type: :string, default: "https://gitlab.com/api/v4/projects/gitlab-org%2Fquality%2Fperformance/wikis"
  banner "\nEnvironment Variable(s):"
  banner "  CI_PROJECT_ACCESS_TOKEN   A valid GitLab Personal Access Token that has access to the intended project where the wiki page will be posted. The token should come from a User that has admin access for the project(s) and have API permissions. (Default: nil)"
end

raise 'Environment Variable CI_PROJECT_ACCESS_TOKEN must be set to proceed. See command help for more info' unless ENV['CI_PROJECT_ACCESS_TOKEN']

def generate_comparision_table(results)
  return nil if results.length <= 1

  results_comparision_data = {}
  results_comparision_versions = []

  results.each do |result|
    results_comparision_versions |= [result["version"].tr('.', '-')]
  end

  results.each_with_index do |result, result_num|
    result['test_results'].each do |test_result|
      results_comparision_data[test_result["name"]] ||= Hash[results_comparision_versions.collect { |version| [version, "-"] }]

      last_test_result = results[result_num - 1]['test_results'].find { |res| res['name'] == test_result["name"] } unless result_num.zero?
      if last_test_result
        last_test_difference = (test_result['response_p95'].to_f - last_test_result['response_p95'].to_f).round(2)
        last_test_difference_str = last_test_difference.positive? ? "_+#{last_test_difference}ms_" : "**#{last_test_difference}ms**"

        results_comparision_data[test_result["name"]][result["version"].tr('.', '-')] = "#{test_result['response_p95']}ms (#{last_test_difference_str})"
      else
        results_comparision_data[test_result["name"]][result["version"].tr('.', '-')] = "#{test_result['response_p95']}ms (-)"
      end
    end
  end

  results_comparision_table = []
  results_comparision_data.sort.each do |name, results|
    results_comparision_table << { 'name' => name }.merge(results)
  end

  tp.set(:max_width, 60)
  TablePrint::Printer.table_print(results_comparision_table)
end

results_files = @opts[:results_path].include?(".json") ? Dir.glob(@opts[:results_path]) : Dir.glob("#{@opts[:results_path]}/**/*_results.json")
results_unsorted = results_files.map { |results_file| JSON.parse(File.read(results_file)) }
results_list = Naturally.sort_by(results_unsorted) { |results| results['version'] }
raise "\nNo results found in specified path(s):\n#{@opts[:results_path]}\nExiting..." if results_list.empty?

results_comparision_data = generate_comparision_table(results_list)

results_comparision_contents = results_list.length > 1 ? "[[_TOC_]]\n" : ""
results_comparision_contents << "## Comparisions\n#{results_comparision_data}\n" if results_comparision_data

results_list.each do |results|
  results_summary = RunK6.generate_results_summary(results_json: results)
  results_table = RunK6.generate_results_table(results_json: results)

  results_comparision_contents << "\n## #{results['name'].capitalize} - #{results['version']}\n" unless results_list.length == 1
  results_comparision_contents << "#{results_summary}\n" + "\n#{results_table}\n"
end

results_comparision_file = File.join(@opts[:results_path], "results_comparision.txt")
puts "\nSaving results to #{results_comparision_file}"
File.write(results_comparision_file, results_comparision_contents)

puts "\nPosting results to Wiki page"
headers = {
  'Authorization': "Bearer #{ENV['CI_PROJECT_ACCESS_TOKEN']}"
}

create_params = {
  title: @opts[:page_title],
  content: "Autogenerated by GitLab Performance Tool"
}
GPTCommon.make_http_request(method: 'post', url: @opts[:api_url], params: create_params, headers: headers)

edit_params = {
  title: @opts[:page_title],
  content: results_comparision_contents
}
GPTCommon.make_http_request(method: 'put', url: "#{@opts[:api_url]}/#{@opts[:page_title].gsub('/', '%2F')}", params: edit_params, headers: headers)
puts "\nResults posted!"
