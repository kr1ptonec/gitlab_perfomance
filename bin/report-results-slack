#!/usr/bin/env ruby

require 'fileutils'
require 'time'
require 'http'
require 'json'

# Get parent folder(`k6`) path from the current file
k6_dir = File.expand_path('../k6', __dir__)

def send_results_to_slack(results_file_path, message, content = nil)
  url = "https://slack.com/api/files.upload"
  file = HTTP::FormData::File.new(results_file_path) if results_file_path
  filename = File.basename(results_file_path) if results_file_path
  body = {
    token: ENV['SLACK_BOT_TOKEN'],
    channels: ENV['CI_SLACK_CHANNEL'],
    file: file,
    content: content,
    initial_comment: message,
    title: filename
  }
  response = HTTP.post(url, form: body)
  response_body = JSON.parse(response.body.to_s)
  raise "\nRequest to Slack error:\n#{response_body}\nExiting..." unless response_body["ok"]
end

def prepare_message_text(result, results_time = nil)
  message = "Test k6 against #{ENV['ENVIRONMENT_NAME']} has"
  summary = result == "true" ? ":ci_passing: #{message} passed! :ci_passing:\n" : ":ci_failing: #{message} failed! :ci_failing:\n"
  summary << "Pipeline - #{ENV['CI_PIPELINE_URL']}\n"
  summary << "Grafana - #{ENV['ENVIRONMENT_GRAFANA_DASHBOARD_URL']}?from=#{results_time['start_time']}&to=#{results_time['end_time']}" if ENV['ENVIRONMENT_GRAFANA_DASHBOARD_URL'] && results_time
  summary
end

def find_results_file(k6_dir)
  results_file = Dir.glob("#{k6_dir}/results/**/*_results.txt").first
  if results_file.nil?
    result = 'false'
    failure_message = prepare_message_text(result)
    error_log = "\nNo results found in specified path(s):\n#{"#{k6_dir}/results/**/*_results.txt"}\nExiting..."
    send_results_to_slack(results_file, failure_message, error_log)
    raise error_log
  end

  results_file
end

def get_test_time_file(k6_dir)
  Dir.glob("#{k6_dir}/results/**/*_test_epoch_times.json").first
end

def get_results_time(time_file)
  time_file_content = File.read(time_file)
  JSON.parse(time_file_content)
end

result = ENV['SUCCESS_TEST_RUN'].dup # needed here as Env vars are frozen in Ruby
results_file_path = find_results_file(k6_dir)
results_time_file_path = get_test_time_file(k6_dir)
results_time = get_results_time(results_time_file_path) unless results_time_file_path.nil?
message = prepare_message_text(result, results_time)
puts "Posting results summary to Slack:\n#{results_file_path}"
send_results_to_slack(results_file_path, message)
