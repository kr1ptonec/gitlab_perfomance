#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path('../lib', __dir__)

require 'test_info'
require 'gpt_common'
require 'optimist'
require 'run_k6'
require 'table_print'

# Get parent folder(`k6`) path from the current file
k6_dir = File.expand_path('../k6', __dir__)
tp.set(:max_width, 800)

@opts = Optimist.options do
  banner "Usage: ci-report-test-info-wiki [options]"
  banner "\nReports GitLab Performance Tool test details to a Wiki. Designed for us in GitLab CI."
  banner "\nOptions:"
  opt :help, 'Show help message'
  opt :page_title, "Title to use for wiki page", type: :string, required: true
  opt :api_url, "GitLab wiki API URL", type: :string, default: "https://gitlab.com/api/v4/projects/gitlab-org%2Fquality%2Fperformance/wikis"
  banner "\nEnvironment Variable(s):"
  banner "  CI_PROJECT_ACCESS_TOKEN   A valid GitLab Personal Access Token that has access to the intended project where the wiki page will be posted. The token should come from a User that has admin access for the project(s) and have all permissions. (Default: nil)"
end

raise 'Environment Variable CI_PROJECT_ACCESS_TOKEN must be set to proceed. See command help for more info' unless ENV['CI_PROJECT_ACCESS_TOKEN']

puts "Collecting test info..."
tests = RunK6.get_tests(k6_dir: k6_dir, test_paths: ["tests"], quarantined: true, scenarios: true, unsafe: true)
tests_info = TestInfo.get_tests_info(tests)
test_types = tests_info.map { |test_info| test_info[:type] }.uniq
tests_with_issues = tests_info.select { |test_info| !test_info[:issues].nil? }

wiki_report_contents = <<~DOC
  GitLab Performance Tool provides several different types of tests:
  * [`api`](#api) - API endpoint tests
  * [`git`](#git) - git-related tests
  * [`scenarios`](#scenarios) - standalone test scenarios
  * [`web`](#web) - Web page tests
  * [`quarantined`](#quarantined) - tests that are quarantined because of some ongoing issue with endpoint or test itself

  **Note:** Some endpoints have [known issues](#known-issues). These tests have either been run with a custom lower threshold limit applied or are quarantined until the issue is fixed.
DOC

test_types.each do |type|
  wiki_report_contents << "\n## #{type.match?(/api/) ? type.upcase : type.capitalize}\n"
  tests_info_by_type = tests_info.select { |test| test[:type] == type }
  wiki_report_contents << TablePrint::Printer.table_print(tests_info_by_type, [{ tests: ->(test) { "#{test[:link_md]}<br><br>#{test[:endpoint]}" } }, :description])
end

wiki_report_contents << "\n## Known Issues\n"
wiki_report_contents << TablePrint::Printer.table_print(tests_with_issues, [:name, :issues])

puts "Posting test info to Wiki page..."
headers = { 'PRIVATE-TOKEN': ENV['CI_PROJECT_ACCESS_TOKEN'] }

create_params = {
  title: @opts[:page_title],
  content: "Autogenerated by GitLab Performance Tool"
}
GPTCommon.make_http_request(method: 'post', url: @opts[:api_url], params: create_params, headers: headers, fail_on_error: false)

edit_params = {
  title: @opts[:page_title],
  content: wiki_report_contents
}
GPTCommon.make_http_request(method: 'put', url: "#{@opts[:api_url]}/#{@opts[:page_title]}", params: edit_params, headers: headers)
puts "Test info posted"
